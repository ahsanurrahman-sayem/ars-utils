name: Build & Release Python Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref_type == 'branch' # run only on branch pushes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build tools
        run: pip install build toml

      - name: Extract version from pyproject.toml
        run: |
          python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])"

      - name: Build package
        run: python -m build


  release:
    runs-on: ubuntu-latest
    #if: github.ref_type == 'tag' # run only on tag pushes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build tools
        run: pip install build toml

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify tag matches pyproject.toml version
        run: |
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          echo "Tag Version :$TAG_VERSION"
          FILE_VERSION="${{ steps.get_version.outputs.version }}"
          echo "File Version: $FILE_VERSION"
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "❌ Tag version ($TAG_VERSION) does not match pyproject.toml version ($FILE_VERSION)"
          fi

      - name: Build package
        run: python -m build

      #- name: Get version from pyproject.toml
        #id: get_version
        #run: |
         #VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
         #echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
         tag_name: v${{ steps.get_version.outputs.version }}
         name: Release v${{ steps.get_version.outputs.version }}
         files: dist/*
    env:
     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
