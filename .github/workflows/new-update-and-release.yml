Name: Build & Release Python Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref_type == 'branch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build tools
        run: pip install build toml

      # This step builds the package but does not create a release.
      - name: Build package
        run: python -m build

  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  release:
    runs-on: ubuntu-latest
    # This ensures the 'release' job only runs when you create a new tag, like 'v0.4.1'
    if: github.ref_type == 'tag'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build tools
        run: pip install build toml

      # This step extracts the version and saves it as a variable for later use.
      # The 'id' helps other steps reference this output.
      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify tag matches pyproject.toml version
        run: |
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          echo "Tag Version: $TAG_VERSION"
          FILE_VERSION="${{ steps.get_version.outputs.version }}"
          echo "File Version: $FILE_VERSION"
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "‚ùå Tag version ($TAG_VERSION) does not match pyproject.toml version ($FILE_VERSION)"
            exit 1
          fi

      - name: Build package
        run: python -m build

      # This is the key step that renames the file so you have a static link.
      # It finds the file that has the version number (e.g., 'ars-0.4.1-py3-none-any.whl')
      # and renames it to a static name ('ars-latest.whl').
      - name: Rename wheel file to ars-latest.whl
        run: mv dist/ars-*.whl dist/ars-latest.whl

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # This creates the release with the correct tag from your push.
          tag_name: v${{ steps.get_version.outputs.version }}
          # The name for the release will now include the version number.
          name: Release v${{ steps.get_version.outputs.version }}
          # This uploads all files in the 'dist' directory, which now includes both
          # the versioned file and the 'ars-latest.whl' file.
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
