# This method is generated by Gemini-Flash.

import colorsys

def getColorPallete(hex_color):
	"""
	Generates a balanced color palette using the golden ratio.

	Args:
		hex_color (str): The initial color code in hexadecimal format (e.g., "#3498DB").

	Returns:
		dict: A dictionary containing the original color and three derived colors with suggested uses.
	"""
	# Step 1: Convert the hexadecimal color to RGB values (0-255).
	# This is necessary for the colorsys library.
	hex_color = hex_color.lstrip('#')
	rgb_tuple = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
	del hex_color

	# Step 2: Normalize the RGB values to a 0-1 range.
	# The colorsys library requires this range.
	r, g, b = (val / 255.0 for val in rgb_tuple)
	del rgb_tuple

	# Step 3: Convert the normalized RGB to HSV (Hue, Saturation, Value).
	# This lets us easily manipulate the hue.
	h, s, v = colorsys.rgb_to_hsv(r, g, b)
	del r, g, b

	# Step 4: Apply the golden ratio to the hue.
	golden_ratio_conjugate = 0.61803398875
	hues = []
	for i in range(3):
		h = (h + golden_ratio_conjugate) % 1.0
		hues.append(h)
	del golden_ratio_conjugate

	# Step 5: Convert the new HSV values back to RGB and then to hex codes.
	palette = {
		"primary_color": f"#{int(r * 255):02x}{int(g * 255):02x}{int(b * 255):02x}",
		"palette_colors": []
	}
	# NOTE: 'r', 'g', and 'b' are still available in this scope from the initial conversion.
	# We are using them here to format the primary color string.

	for hue in hues:
		# Convert the new HSV back to normalized RGB.
		r_new, g_new, b_new = colorsys.hsv_to_rgb(hue, s, v)

		# Convert the normalized RGB to a hex color code.
		hex_code = f"#{int(r_new * 255):02x}{int(g_new * 255):02x}{int(b_new * 255):02x}"
		palette["palette_colors"].append(hex_code)
		del r_new, g_new, b_new, hex_code

	del hues, h, s, v, hue

	# Step 6: Suggest roles for each color in the palette.
	suggestions = {
		"Primary Color": palette["primary_color"],
		"Suggested for Fonts": palette["palette_colors"][0],
		"Suggested for Buttons": palette["palette_colors"][1],
		"Suggested for Backgrounds/Accents": palette["palette_colors"][2]
	}
	del palette

	return suggestions
